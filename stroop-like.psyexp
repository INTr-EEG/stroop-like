<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2021.2.3">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'Task': &quot;['Day/Night', 'Elephant', 'Crayon']&quot;, 'ID': '', 'Age': &quot;['2 Years', '3 Years', '4 Years']&quot;, 'Demo': &quot;['No', 'Yes']&quot;, 'Debug': &quot;['No', 'Yes']&quot;}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="['resources\\seqs\\crayon-2yo.csv', 'resources\\seqs\\day-night-2yo.csv', 'resources\\seqs\\day-night-3yo.csv', 'resources\\seqs\\day-night-4yo.csv', 'resources\\seqs\\elephant-2yo.csv', 'resources\\imgs\\crayon\\boxlongoutline_whbg.png', 'resources\\imgs\\crayon\\boxlongred_whbg.png', 'resources\\imgs\\crayon\\boxshortoutline_whbg.png', 'resources\\imgs\\crayon\\boxshortred_whbg.png', 'resources\\imgs\\crayon\\longred_whbg_transp.png', 'resources\\imgs\\crayon\\longyellow_whbg_transp.png', 'resources\\imgs\\crayon\\shortred_whbg_transp.png', 'resources\\imgs\\crayon\\shortyellow_whbg_transp.png', 'resources\\imgs\\elephant\\elephant-big-transp.png', 'resources\\imgs\\elephant\\elephant-box-big.png', 'resources\\imgs\\elephant\\elephant-box-small.png', 'resources\\imgs\\elephant\\elephant-small-transp.png', 'resources\\imgs\\elephant\\penguin-box.png', 'resources\\imgs\\elephant\\penguin-transp.png', 'resources\\imgs\\day-night\\day.png', 'resources\\imgs\\day-night\\day-box.png', 'resources\\imgs\\day-night\\day-redline.png', 'resources\\imgs\\day-night\\deck.png', 'resources\\imgs\\day-night\\night.png', 'resources\\imgs\\day-night\\night-box.png', 'resources\\imgs\\day-night\\night-redline.png', 'resources\\imgs\\slides\\new-slide-1.png', 'resources\\imgs\\slides\\new-slide-2.png', 'resources\\imgs\\slides\\new-slide-3.png', 'resources\\imgs\\slides\\new-slide-4.png', 'resources\\imgs\\slides\\slide-03.png', 'resources\\imgs\\slides\\slide-04.png', 'resources\\imgs\\slides\\slide-06.png', 'resources\\imgs\\slides\\slide-07.png', 'resources\\imgs\\slides\\slide-09.png', 'resources\\imgs\\slides\\slide-10.png', 'resources\\imgs\\continue.png']" valType="list"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save hdf5 file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1920, 1080]" valType="list"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="#D8E6E4" valType="color"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="elAddress" updates="None" val="100.1.1.1" valType="str"/>
    <Param name="elDataFiltering" updates="None" val="FILTER_LEVEL_2" valType="str"/>
    <Param name="elLiveFiltering" updates="None" val="FILTER_LEVEL_OFF" valType="str"/>
    <Param name="elModel" updates="None" val="EYELINK 1000 DESKTOP" valType="str"/>
    <Param name="elPupilAlgorithm" updates="None" val="ELLIPSE_FIT" valType="str"/>
    <Param name="elPupilMeasure" updates="None" val="PUPIL_AREA" valType="str"/>
    <Param name="elSampleRate" updates="None" val="1000" valType="num"/>
    <Param name="elSimMode" updates="None" val="False" valType="bool"/>
    <Param name="elTrackEyes" updates="None" val="RIGHT_EYE" valType="str"/>
    <Param name="elTrackingMode" updates="None" val="PUPIL_CR_TRACKING" valType="str"/>
    <Param name="expName" updates="None" val="stroop-like" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="eyetracker" updates="None" val="None" valType="str"/>
    <Param name="gpAddress" updates="None" val="127.0.0.1" valType="str"/>
    <Param name="gpPort" updates="None" val="4242" valType="num"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
    <Param name="mgBlink" updates="None" val="('MIDDLE_BUTTON',)" valType="list"/>
    <Param name="mgMove" updates="None" val="CONTINUOUS" valType="str"/>
    <Param name="mgSaccade" updates="None" val="0.5" valType="num"/>
    <Param name="tbLicenseFile" updates="None" val="" valType="str"/>
    <Param name="tbModel" updates="None" val="" valType="str"/>
    <Param name="tbSampleRate" updates="None" val="60" valType="num"/>
    <Param name="tbSerialNo" updates="None" val="" valType="str"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <CodeComponent name="trialCode">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if (((practice_passed || terminate_experiment) || ((! SHOW_DEMO) &amp;&amp; is_demo))) {&amp;#10;    continueRoutine = false;&amp;#10;} else {&amp;#10;    if ((trialNum === 1)) {&amp;#10;        box1 = make_img(&quot;box1&quot;, box1_file, BOX_POS_1);&amp;#10;        box2 = make_img(&quot;box2&quot;, box2_file, BOX_POS_2);&amp;#10;        if ((TASK_NAME === &quot;Day/Night&quot;)) {&amp;#10;            box1.name = &quot;day_box&quot;;&amp;#10;            box2.name = &quot;night_box&quot;;&amp;#10;            CARD_STACK = make_img(&quot;card_stack&quot;, &quot;resources/imgs/day-night/deck.png&quot;, CARD_STACK_POS);&amp;#10;            unhide(CARD_STACK, DECK_SIZE);&amp;#10;        } else {&amp;#10;            if ((TASK_NAME === &quot;Elephant&quot;)) {&amp;#10;                box1.name = &quot;big_elephant_box&quot;;&amp;#10;                if ((Number.parseInt(blockNum) &lt;= 3)) {&amp;#10;                    box2.name = &quot;penguin_box&quot;;&amp;#10;                } else {&amp;#10;                    box2.name = &quot;small_elephant_box&quot;;&amp;#10;                }&amp;#10;            } else {&amp;#10;                if ((TASK_NAME === &quot;Crayon&quot;)) {&amp;#10;                    box1.name = &quot;long_crayon_box&quot;;&amp;#10;                    box2.name = &quot;short_crayon_box&quot;;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        unhide(box1, BOX_SIZE);&amp;#10;        unhide(box2, BOX_SIZE);&amp;#10;    }&amp;#10;}&amp;#10;hide(GLOBAL_CONT);&amp;#10;dormant_card = make_img(stimulus, stimulus_file, NEW_CARD_POS);&amp;#10;active_card = null;&amp;#10;moving_card = null;&amp;#10;drag_in_process = false;&amp;#10;if (((CARD_STACK !== null) &amp;&amp; (trialNum === maxScore))) {&amp;#10;    hide(CARD_STACK);&amp;#10;}&amp;#10;feedback_delay_start = null;&amp;#10;picture_delay_start = 0.0;&amp;#10;choice = null;&amp;#10;correct = null;&amp;#10;trial_time = null;&amp;#10;x = 0;&amp;#10;y = 0;&amp;#10;coords_x = [];&amp;#10;coords_y = [];&amp;#10;coords_t = [];&amp;#10;DRAG_MOUSE_state = 1;&amp;#10;prev_DRAG_MOUSE_state = 0;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;if practice_passed \&amp;#10;or terminate_experiment \&amp;#10;or (not SHOW_DEMO and is_demo):&amp;#10;    continueRoutine = False&amp;#10;elif trialNum == 1:&amp;#10;    # First trial of the block&amp;#10;    box1 = make_img(&quot;box1&quot;, box1_file, BOX_POS_1)&amp;#10;    box2 = make_img(&quot;box2&quot;, box2_file, BOX_POS_2)&amp;#10;    if TASK_NAME == &quot;Day/Night&quot;:&amp;#10;        box1.name = &quot;day_box&quot;&amp;#10;        box2.name = &quot;night_box&quot;&amp;#10;        CARD_STACK = make_img(&amp;#10;            &quot;card_stack&quot;,&amp;#10;            &quot;resources/imgs/day-night/deck.png&quot;,&amp;#10;            CARD_STACK_POS&amp;#10;        )&amp;#10;        unhide(CARD_STACK, DECK_SIZE)&amp;#10;    elif TASK_NAME == &quot;Elephant&quot;:&amp;#10;        box1.name = &quot;big_elephant_box&quot;&amp;#10;        if int(blockNum) &lt;= 3:&amp;#10;            box2.name = &quot;penguin_box&quot;&amp;#10;        else:&amp;#10;            box2.name = &quot;small_elephant_box&quot;&amp;#10;    elif TASK_NAME == &quot;Crayon&quot;:&amp;#10;        box1.name = &quot;long_crayon_box&quot;&amp;#10;        box2.name = &quot;short_crayon_box&quot;&amp;#10;    unhide(box1, BOX_SIZE)&amp;#10;    unhide(box2, BOX_SIZE)&amp;#10;&amp;#10;hide(GLOBAL_CONT)&amp;#10;&amp;#10;dormant_card = make_img(&amp;#10;    stimulus,&amp;#10;    stimulus_file,&amp;#10;    NEW_CARD_POS&amp;#10;)&amp;#10;active_card = None&amp;#10;moving_card = None&amp;#10;drag_in_process = False&amp;#10;&amp;#10;if CARD_STACK is not None and trialNum == maxScore:&amp;#10;    # Last trial of the block&amp;#10;    hide(CARD_STACK)&amp;#10;&amp;#10;feedback_delay_start = None&amp;#10;picture_delay_start = 0.0&amp;#10;&amp;#10;choice = None&amp;#10;correct = None&amp;#10;trial_time = None&amp;#10;&amp;#10;x = 0&amp;#10;y = 0&amp;#10;coords_x = []&amp;#10;coords_y = []&amp;#10;coords_t = []&amp;#10;&amp;#10;# Would have clicked 'continue' to reach here&amp;#10;DRAG_MOUSE_state = 1&amp;#10;prev_DRAG_MOUSE_state = 0&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="&amp;#10;if SHOW_DEBUG:&amp;#10;    trialDebug.text = f&quot;&quot;&quot;tryNum = {tryNum}&amp;#10;trialNum = {trialNum} (out of {maxScore})&amp;#10;score = {score} (out of {maxScore})&amp;#10;globalClock = {round(globalClock.getTime(), 3)}&amp;#10;t = {round(t, 3)}&amp;#10;&quot;&quot;&quot;&amp;#10;    if moving_card is not None:&amp;#10;        trialDebug.text += f&quot;&quot;&quot;\nmoving_card.name = {moving_card.name}&amp;#10;pos = ({round(moving_card.pos[0], 3)}, {round(moving_card.pos[1], 3)})&amp;#10;&quot;&quot;&quot;&amp;#10;&amp;#10;# There will always be a delay...&amp;#10;if feedback_delay_start is not None:&amp;#10;    # Test no removing delay for non-practice&amp;#10;    if is_practice:&amp;#10;        feedback_delay = 0.5  # seconds&amp;#10;        if is_practice and correct == 0:&amp;#10;            # Longer delay for incorrect answer&amp;#10;            feedback_delay = 1.0  # seconds&amp;#10;        if t - feedback_delay_start &gt; feedback_delay:&amp;#10;            continueRoutine = False&amp;#10;    else:&amp;#10;        # No delay for non-practice&amp;#10;        continueRoutine = False&amp;#10;elif active_card is None and t &gt; 0.05:&amp;#10;    active_card = dormant_card&amp;#10;    unhide(active_card, CARD_SIZE)&amp;#10;elif not drag_in_process and t &gt; 0.1:&amp;#10;    DRAG_MOUSE_state = DRAG_MOUSE.getPressed()[0]&amp;#10;    if prev_DRAG_MOUSE_state != DRAG_MOUSE_state:&amp;#10;        prev_DRAG_MOUSE_state = DRAG_MOUSE_state&amp;#10;        if DRAG_MOUSE_state == 1:&amp;#10;            if DRAG_MOUSE.isPressedIn(active_card):&amp;#10;                moving_card = active_card&amp;#10;                drag_in_process = True&amp;#10;&amp;#10;if DRAG_MOUSE.getPressed()[0] == 1:&amp;#10;    if drag_in_process:&amp;#10;        x, y = moving_card.pos = DRAG_MOUSE.getPos()&amp;#10;        if len(coords_x) == 0 or dist_sq(coords_x[-1], coords_y[-1], x, y) &gt; MIN_DIST_SQ:&amp;#10;            coords_x.append(round_dp(x))&amp;#10;            coords_y.append(round_dp(y))&amp;#10;            coords_t.append(round_dp(t))&amp;#10;else:&amp;#10;    drag_in_process = False&amp;#10;    if moving_card is not None:&amp;#10;        # Made a choice&amp;#10;        if snapped(moving_card, box1):&amp;#10;            choice = box1.name&amp;#10;            hide(moving_card)&amp;#10;        elif snapped(moving_card, box2):&amp;#10;            choice = box2.name&amp;#10;            hide(moving_card)&amp;#10;        # Evaluate choice&amp;#10;        if choice is not None:&amp;#10;            trial_time = t&amp;#10;            cumulative_time += t&amp;#10;            feedback_delay_start = t&amp;#10;            if choice == corrAns:&amp;#10;                correct = 1&amp;#10;                trialFeedback.text = &quot;Correct!&quot;&amp;#10;                score += 1&amp;#10;            else:&amp;#10;                correct = 0&amp;#10;                trialFeedback.text = &quot;Let's think again&quot;&amp;#10;        moving_card = None&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if (SHOW_DEBUG) {&amp;#10;    trialDebug.text = `tryNum = ${tryNum}&amp;#10;trialNum = ${trialNum} (out of ${maxScore})&amp;#10;score = ${score} (out of ${maxScore})&amp;#10;globalClock = ${round(globalClock.getTime(), 3)}&amp;#10;t = ${round(t, 3)}`&amp;#10;;&amp;#10;    if ((moving_card !== null)) {&amp;#10;        trialDebug.text += `&amp;#10;moving_card.name = ${moving_card.name}&amp;#10;pos = (${round(moving_card.pos[0], 3)}, ${round(moving_card.pos[1], 3)})`&amp;#10;;&amp;#10;    }&amp;#10;}&amp;#10;if ((feedback_delay_start !== null)) {&amp;#10;    if (is_practice) {&amp;#10;        feedback_delay = 0.5;&amp;#10;        if ((is_practice &amp;&amp; (correct === 0))) {&amp;#10;            feedback_delay = 1.0;&amp;#10;        }&amp;#10;        if (((t - feedback_delay_start) &gt; feedback_delay)) {&amp;#10;            continueRoutine = false;&amp;#10;        }&amp;#10;    } else {&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;} else {&amp;#10;    if (((active_card === null) &amp;&amp; (t &gt; 0.05))) {&amp;#10;        active_card = dormant_card;&amp;#10;        unhide(active_card, CARD_SIZE);&amp;#10;    } else {&amp;#10;        if (((! drag_in_process) &amp;&amp; (t &gt; 0.1))) {&amp;#10;            DRAG_MOUSE_state = DRAG_MOUSE.getPressed()[0];&amp;#10;            if ((prev_DRAG_MOUSE_state !== DRAG_MOUSE_state)) {&amp;#10;                prev_DRAG_MOUSE_state = DRAG_MOUSE_state;&amp;#10;                if ((DRAG_MOUSE_state === 1)) {&amp;#10;                    if (DRAG_MOUSE.isPressedIn(active_card)) {&amp;#10;                        moving_card = active_card;&amp;#10;                        drag_in_process = true;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if ((DRAG_MOUSE.getPressed()[0] === 1)) {&amp;#10;    if (drag_in_process) {&amp;#10;        [x, y] = moving_card.pos = DRAG_MOUSE.getPos();&amp;#10;        if (((coords_x.length === 0) || (dist_sq(coords_x.slice((- 1))[0], coords_y.slice((- 1))[0], x, y) &gt; MIN_DIST_SQ))) {&amp;#10;            coords_x.push(round_dp(x));&amp;#10;            coords_y.push(round_dp(y));&amp;#10;            coords_t.push(round_dp(t));&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    drag_in_process = false;&amp;#10;    if ((moving_card !== null)) {&amp;#10;        if (snapped(moving_card, box1)) {&amp;#10;            choice = box1.name;&amp;#10;            hide(moving_card);&amp;#10;        } else {&amp;#10;            if (snapped(moving_card, box2)) {&amp;#10;                choice = box2.name;&amp;#10;                hide(moving_card);&amp;#10;            }&amp;#10;        }&amp;#10;        if ((choice !== null)) {&amp;#10;            trial_time = t;&amp;#10;            cumulative_time += t;&amp;#10;            feedback_delay_start = t;&amp;#10;            if ((choice === corrAns)) {&amp;#10;                correct = 1;&amp;#10;                trialFeedback.text = &quot;Correct!&quot;;&amp;#10;                score += 1;&amp;#10;            } else {&amp;#10;                correct = 0;&amp;#10;                trialFeedback.text = &quot;Let's think again&quot;;&amp;#10;            }&amp;#10;        }&amp;#10;        moving_card = null;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if ((trialNum === maxScore)) {&amp;#10;    /* Last trial of the block */&amp;#10;    if ((box1 !== null)) {&amp;#10;        hide(box1);&amp;#10;    }&amp;#10;    if ((box2 !== null)) {&amp;#10;        hide(box2);&amp;#10;    }&amp;#10;    if ((CARD_STACK !== null)) {&amp;#10;        hide(CARD_STACK);&amp;#10;    }&amp;#10;    if (((AGE_YEARS !== &quot;2 Years&quot;) &amp;&amp; (tryNum === 3))) {&amp;#10;        if ((((! practice_passed) &amp;&amp; EXIT_3_PRAC) &amp;&amp; (score &lt; maxScore))) {&amp;#10;            terminate_experiment = true;&amp;#10;        }&amp;#10;        practice_passed = false;&amp;#10;    }&amp;#10;    if (((AGE_YEARS === &quot;2 Years&quot;) &amp;&amp; (tryNum === 1))) {&amp;#10;        if ((((! practice_passed) &amp;&amp; EXIT_3_PRAC) &amp;&amp; (score &lt; maxScore))) {&amp;#10;            terminate_experiment = true;&amp;#10;        }&amp;#10;        practice_passed = false;&amp;#10;    } else {&amp;#10;        if ((is_practice &amp;&amp; (score === maxScore))) {&amp;#10;            practice_passed = true;&amp;#10;        }&amp;#10;    }&amp;#10;    score = 0;&amp;#10;}&amp;#10;trialFeedback.text = &quot;&quot;;&amp;#10;psychoJS.experiment.addData(&quot;choice&quot;, choice);&amp;#10;psychoJS.experiment.addData(&quot;correct&quot;, correct);&amp;#10;psychoJS.experiment.addData(&quot;trial_time&quot;, trial_time);&amp;#10;psychoJS.experiment.addData(&quot;cumulative_time&quot;, cumulative_time);&amp;#10;psychoJS.experiment.addData(&quot;coords_x&quot;, coords_x);&amp;#10;psychoJS.experiment.addData(&quot;coords_y&quot;, coords_y);&amp;#10;psychoJS.experiment.addData(&quot;coords_t&quot;, coords_t);&amp;#10;psychoJS.experiment.addData(&quot;end_timestamp&quot;, util.MonotonicClock.getDateStr());&amp;#10;psychoJS.experiment.addData(&quot;total_seconds&quot;, globalClock.getTime());&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;if trialNum == maxScore:&amp;#10;    &quot;Last trial of the block&quot;&amp;#10;    if box1 is not None:&amp;#10;        hide(box1)&amp;#10;    if box2 is not None:&amp;#10;        hide(box2)&amp;#10;&amp;#10;    if CARD_STACK is not None:&amp;#10;        hide(CARD_STACK)&amp;#10;#    if age_months &gt; 24 and tryNum == 3:&amp;#10;    if AGE_YEARS != &quot;2 Years&quot; and tryNum == 3:&amp;#10;        if not practice_passed and EXIT_3_PRAC and score &lt; maxScore:&amp;#10;            terminate_experiment = True&amp;#10;        practice_passed = False  # Reset&amp;#10;#    if age_months &lt;= 24 and tryNum == 1:&amp;#10;    if AGE_YEARS == &quot;2 Years&quot; and tryNum == 1:&amp;#10;        if not practice_passed and EXIT_3_PRAC and score &lt; maxScore:&amp;#10;            terminate_experiment = True&amp;#10;        practice_passed = False  # Reset&amp;#10;    elif is_practice and score == maxScore:&amp;#10;        practice_passed = True&amp;#10;    score = 0  # Reset&amp;#10;&amp;#10;trialFeedback.text = &quot;&quot;&amp;#10;&amp;#10;thisExp.addData(&quot;choice&quot;, choice)&amp;#10;thisExp.addData(&quot;correct&quot;, correct)&amp;#10;thisExp.addData(&quot;trial_time&quot;, trial_time)&amp;#10;thisExp.addData(&quot;cumulative_time&quot;, cumulative_time)&amp;#10;&amp;#10;# Position tracking (for Nixi)&amp;#10;thisExp.addData(&quot;coords_x&quot;, coords_x)&amp;#10;thisExp.addData(&quot;coords_y&quot;, coords_y)&amp;#10;thisExp.addData(&quot;coords_t&quot;, coords_t)&amp;#10;&amp;#10;# Record timestamp and total time&amp;#10;thisExp.addData(&quot;end_timestamp&quot;, util.MonotonicClock.getDateStr())&amp;#10;thisExp.addData(&quot;total_seconds&quot;, globalClock.getTime())&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="trialCode" valType="code"/>
      </CodeComponent>
      <TextComponent name="trialHeader">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="num"/>
        <Param name="name" updates="None" val="trialHeader" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0.4)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$blockName" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <TextComponent name="trialFeedback">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="num"/>
        <Param name="name" updates="None" val="trialFeedback" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, -0.05)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="condition" valType="str"/>
        <Param name="startVal" updates="None" val="is_practice" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <TextComponent name="trialDebug">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.02" valType="num"/>
        <Param name="name" updates="None" val="trialDebug" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0.5, 0.4)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="condition" valType="str"/>
        <Param name="startVal" updates="None" val="SHOW_DEBUG" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
    </Routine>
    <Routine name="begin1">
      <CodeComponent name="begin1Code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="&amp;#10;expVersion = &quot;2022.09.17&quot;&amp;#10;&amp;#10;SHOW_DEMO = (expInfo[&quot;Demo&quot;] == &quot;Yes&quot;)&amp;#10;SHOW_DEBUG = (expInfo[&quot;Debug&quot;] == &quot;Yes&quot;)&amp;#10;USE_AUDIO = False&amp;#10;&amp;#10;TASK_NAME = expInfo[&quot;Task&quot;]&amp;#10;AGE_YEARS = expInfo[&quot;Age&quot;]&amp;#10;&amp;#10;SEQ_DIR = &quot;resources/seqs&quot;&amp;#10;&amp;#10;&quot;Check&quot;&amp;#10;if TASK_NAME == &quot;Elephant&quot; or TASK_NAME == &quot;Crayon&quot;:&amp;#10;    if AGE_YEARS != &quot;2 Years&quot;:&amp;#10;        raise f&quot;Please refresh and select '2 Years' for {TASK_NAME} task.&quot;&amp;#10;    conditions_file = {&amp;#10;        &quot;Elephant&quot;: f&quot;{SEQ_DIR}/elephant-2yo.csv&quot;,&amp;#10;        &quot;Crayon&quot;: f&quot;{SEQ_DIR}/crayon-2yo.csv&quot;,&amp;#10;    }[TASK_NAME]&amp;#10;elif TASK_NAME == &quot;Day/Night&quot;:&amp;#10;    conditions_file = {&amp;#10;        &quot;2 Years&quot;: f&quot;{SEQ_DIR}/day-night-2yo.csv&quot;,&amp;#10;        &quot;3 Years&quot;: f&quot;{SEQ_DIR}/day-night-3yo.csv&quot;,&amp;#10;        &quot;4 Years&quot;: f&quot;{SEQ_DIR}/day-night-4yo.csv&quot;,&amp;#10;    }[AGE_YEARS]&amp;#10;&amp;#10;print(f&quot;conditions_file = {conditions_file}&quot;)&amp;#10;&amp;#10;&amp;#10;&amp;#10;#age_months_str = expInfo[&quot;Age (months)&quot;]&amp;#10;##age_months = None&amp;#10;#&quot;Result will depend on the behavior of Number.parseFloat()&quot;&amp;#10;#&quot;We know that it will at least interpret leading numbers, e.g. '123abc' as 123&quot;&amp;#10;#age_months = float(age_months_str)&amp;#10;#if str(age_months) == &quot;NaN&quot;:&amp;#10;#    raise f&quot;Invalid value for Age (months): \&quot;{age_months_str}\&quot;. Please reload the page and provide a valid value.&quot;&amp;#10;#&amp;#10;#&quot;Make this a function&quot;&amp;#10;#if TASK_NAME == &quot;Elephant&quot;:&amp;#10;#    if age_months &gt; 24:&amp;#10;#        raise f&quot;No suitable conditions file for Elephant task for given age ({age_months} months). Please reload the page and provide an age that is 24 months or less.&quot;&amp;#10;#    conditions_file = &quot;sequences/elephant-2yo.csv&quot;&amp;#10;#elif TASK_NAME == &quot;Crayon&quot;:&amp;#10;#    if age_months &gt; 24:&amp;#10;#        raise f&quot;No suitable conditions file for Crayon task for given age ({age_months} months). Please reload the page and provide an age that is 24 months or less.&quot;&amp;#10;#    conditions_file = &quot;sequences/crayon-2yo.csv&quot;&amp;#10;#elif TASK_NAME == &quot;Day/Night&quot;:&amp;#10;#    if age_months &lt;= 24:&amp;#10;#        conditions_file = &quot;sequences/day-night-2yo.csv&quot;&amp;#10;#    elif age_months &lt;= 36:&amp;#10;#        conditions_file = &quot;sequences/day-night-3yo.csv&quot;&amp;#10;#    else:&amp;#10;#        conditions_file = &quot;sequences/day-night-4yo.csv&quot;&amp;#10;#&amp;#10;#print(f&quot;age_months = {age_months}&quot;)&amp;#10;&amp;#10;&quot;Exit if fail 3 repeat practices (disabled)&quot;&amp;#10;EXIT_3_PRAC = False&amp;#10;&amp;#10;# So the cards do not immediately move (100 ms)&amp;#10;PICTURE_DELAY = 0.1&amp;#10;&amp;#10;# Slides: 1001x563&amp;#10;SLIDE_SIZE = (1.0, 0.562438)&amp;#10;&amp;#10;# Continue: 586x257&amp;#10;CONTINUE_SIZE = (0.228, 0.1)&amp;#10;CONTINUE_POS = (0, -0.4)&amp;#10;&amp;#10;# Deck: 202x280&amp;#10;DECK_SIZE = (0.2, 0.28)&amp;#10;&amp;#10;# Minimum distance apart for subsequent points&amp;#10;MIN_DIST_SQ = 0.005 * 0.005&amp;#10;&amp;#10;IMG_LEN = None&amp;#10;&amp;#10;if TASK_NAME == &quot;Day/Night&quot;:&amp;#10;    &quot;Cards: 180x260&quot;&amp;#10;    CARD_SIZE = (0.18, 0.26)&amp;#10;    &quot;Boxes: 450x370 (0.35 / 450 * 370 = 0.287778)&quot;&amp;#10;    BOX_SIZE = (0.35, 0.287778)&amp;#10;else:&amp;#10;    &quot;Elephant and Crayon are the only others&quot;&amp;#10;#    &quot;Cards: 600x361&quot;&amp;#10;#    CARD_SIZE = (0.3, 0.1805)&amp;#10;#    &quot;Boxes: 600x364&quot;&amp;#10;#    BOX_SIZE = (0.35, 0.212333)&amp;#10;    &quot;New images: all 500x301 (make all same)&quot;&amp;#10;    IMG_LEN = 0.60&amp;#10;    BOX_SIZE = (IMG_LEN, IMG_LEN / 500 * 301)&amp;#10;    CARD_SIZE = BOX_SIZE&amp;#10;&amp;#10;BOX_POS_1 = (-0.4, 0.15)&amp;#10;BOX_POS_2 = (0.4, 0.15)&amp;#10;NEW_CARD_POS = (0, -0.3)&amp;#10;CARD_STACK_POS = (-0.011, -0.291)&amp;#10;&amp;#10;GLOBAL_CONT = make_img(&amp;#10;    &quot;GLOBAL_CONT&quot;,&amp;#10;    &quot;resources/imgs/continue.png&quot;,&amp;#10;    CONTINUE_POS,&amp;#10;    CONTINUE_SIZE&amp;#10;)&amp;#10;&amp;#10;terminate_experiment = False&amp;#10;practice_passed = False&amp;#10;&amp;#10;inst_slide = None&amp;#10;inst_sound = None&amp;#10;&amp;#10;DRAG_MOUSE = core.Mouse(win=win)&amp;#10;&amp;#10;CARD_STACK = None&amp;#10;&amp;#10;cumulative_time = 0.0&amp;#10;score = 0&amp;#10;box1 = None&amp;#10;box2 = None&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="expVersion = &quot;2022.09.17&quot;;&amp;#10;SHOW_DEMO = (expInfo[&quot;Demo&quot;] === &quot;Yes&quot;);&amp;#10;SHOW_DEBUG = (expInfo[&quot;Debug&quot;] === &quot;Yes&quot;);&amp;#10;USE_AUDIO = false;&amp;#10;TASK_NAME = expInfo[&quot;Task&quot;];&amp;#10;AGE_YEARS = expInfo[&quot;Age&quot;];&amp;#10;SEQ_DIR = &quot;resources/seqs&quot;;&amp;#10;/* Check */&amp;#10;if (((TASK_NAME === &quot;Elephant&quot;) || (TASK_NAME === &quot;Crayon&quot;))) {&amp;#10;    if ((AGE_YEARS !== &quot;2 Years&quot;)) {&amp;#10;        throw `Please refresh and select '2 Years' for ${TASK_NAME} task.`;&amp;#10;    }&amp;#10;    conditions_file = {&quot;Elephant&quot;: `${SEQ_DIR}/elephant-2yo.csv`, &quot;Crayon&quot;: `${SEQ_DIR}/crayon-2yo.csv`}[TASK_NAME];&amp;#10;} else {&amp;#10;    if ((TASK_NAME === &quot;Day/Night&quot;)) {&amp;#10;        conditions_file = {&quot;2 Years&quot;: `${SEQ_DIR}/day-night-2yo.csv`, &quot;3 Years&quot;: `${SEQ_DIR}/day-night-3yo.csv`, &quot;4 Years&quot;: `${SEQ_DIR}/day-night-4yo.csv`}[AGE_YEARS];&amp;#10;    }&amp;#10;}&amp;#10;console.log(`conditions_file = ${conditions_file}`);&amp;#10;/* Exit if fail 3 repeat practices (disabled) */&amp;#10;EXIT_3_PRAC = false;&amp;#10;PICTURE_DELAY = 0.1;&amp;#10;SLIDE_SIZE = [1.0, 0.562438];&amp;#10;CONTINUE_SIZE = [0.228, 0.1];&amp;#10;CONTINUE_POS = [0, (- 0.4)];&amp;#10;DECK_SIZE = [0.2, 0.28];&amp;#10;MIN_DIST_SQ = (0.005 * 0.005);&amp;#10;IMG_LEN = null;&amp;#10;if ((TASK_NAME === &quot;Day/Night&quot;)) {&amp;#10;    /* Cards: 180x260 */&amp;#10;    CARD_SIZE = [0.18, 0.26];&amp;#10;    /* Boxes: 450x370 (0.35 / 450 * 370 = 0.287778) */&amp;#10;    BOX_SIZE = [0.35, 0.287778];&amp;#10;} else {&amp;#10;    /* Elephant and Crayon are the only others */&amp;#10;    /* New images: all 500x301 (make all same) */&amp;#10;    IMG_LEN = 0.6;&amp;#10;    BOX_SIZE = [IMG_LEN, ((IMG_LEN / 500) * 301)];&amp;#10;    CARD_SIZE = BOX_SIZE;&amp;#10;}&amp;#10;BOX_POS_1 = [(- 0.4), 0.15];&amp;#10;BOX_POS_2 = [0.4, 0.15];&amp;#10;NEW_CARD_POS = [0, (- 0.3)];&amp;#10;CARD_STACK_POS = [(- 0.011), (- 0.291)];&amp;#10;GLOBAL_CONT = make_img(&quot;GLOBAL_CONT&quot;, &quot;resources/imgs/continue.png&quot;, CONTINUE_POS, CONTINUE_SIZE);&amp;#10;terminate_experiment = false;&amp;#10;practice_passed = false;&amp;#10;inst_slide = null;&amp;#10;inst_sound = null;&amp;#10;DRAG_MOUSE = new core.Mouse({&quot;win&quot;: psychoJS.window});&amp;#10;CARD_STACK = null;&amp;#10;cumulative_time = 0.0;&amp;#10;score = 0;&amp;#10;box1 = null;&amp;#10;box2 = null;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="psychoJS.experiment.addData(&quot;expVersion&quot;, expVersion);&amp;#10;is_demo = (tryNum === 0);&amp;#10;is_practice = ((! is_demo) &amp;&amp; (pracNum !== &quot;NA&quot;));&amp;#10;if ((((slideFile1 === &quot;NA&quot;) || practice_passed) || terminate_experiment)) {&amp;#10;    continueRoutine = false;&amp;#10;} else {&amp;#10;    inst_slide = make_slide(slideFile1);&amp;#10;    unhide(GLOBAL_CONT, CONTINUE_SIZE);&amp;#10;    if (USE_AUDIO) {&amp;#10;        inst_sound = make_sound(&quot;aud/mp3/DN_intro.mp3&quot;);&amp;#10;        inst_sound.play();&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;thisExp.addData(&quot;expVersion&quot;, expVersion)&amp;#10;&amp;#10;is_demo = (tryNum == 0)&amp;#10;is_practice = not is_demo and (pracNum != &quot;NA&quot;)&amp;#10;&amp;#10;if slideFile1 == &quot;NA&quot; \&amp;#10;or practice_passed or \&amp;#10;terminate_experiment:&amp;#10;    continueRoutine = False&amp;#10;else:&amp;#10;    inst_slide = make_slide(slideFile1)&amp;#10;    unhide(GLOBAL_CONT, CONTINUE_SIZE)&amp;#10;    if USE_AUDIO:&amp;#10;        inst_sound = make_sound(&quot;aud/mp3/DN_intro.mp3&quot;)&amp;#10;        inst_sound.play()&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if ((slideFile1 !== &quot;NA&quot;)) {&amp;#10;    hide(inst_slide);&amp;#10;    hide(GLOBAL_CONT);&amp;#10;    if (USE_AUDIO) {&amp;#10;        inst_sound.stop();&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;if slideFile1 != &quot;NA&quot;:&amp;#10;    hide(inst_slide)&amp;#10;    hide(GLOBAL_CONT)&amp;#10;    if USE_AUDIO:&amp;#10;        inst_sound.stop()&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="begin1Code" valType="code"/>
      </CodeComponent>
      <CodeComponent name="functions">
        <Param name="Before Experiment" updates="constant" val="&amp;#10;def within_box(obj, box):&amp;#10;    &quot;&quot;&quot;&amp;#10;    Determine if object is within box&amp;#10;    - Squared difference in x (and y) coordinates &amp;#10;    should be less than the square of half the &amp;#10;    box width (and height)&amp;#10;    - That would mean the center of the object is&amp;#10;    within the box boundaries&amp;#10;    &quot;&quot;&quot;&amp;#10;    obj_x, obj_y = obj.pos&amp;#10;    box_x, box_y = box.pos&amp;#10;    box_w, box_h = box.size&amp;#10;    dx, dy = obj_x - box_x, obj_y - box_y&amp;#10;    hw, hh = box_w / 2, box_h / 2&amp;#10;    return dx * dx &lt; hw * hw and dy * dy &lt; hh * hh&amp;#10;&amp;#10;def snapped(obj1, obj2, func=within_box):&amp;#10;    &quot;&quot;&quot;&amp;#10;    Determine if obj1 snapped to center of obj2&amp;#10;    - Check if obj1 is 'near' obj2, based on func&amp;#10;    - If yes, set the obj1's position to be &amp;#10;    equal to obj2's position and return True&amp;#10;    - Otherwise, do nothing and return False&amp;#10;    &quot;&quot;&quot;&amp;#10;    if func(obj1, obj2):&amp;#10;        obj1.pos = obj2.pos&amp;#10;        return True&amp;#10;    return False&amp;#10;&amp;#10;def hide(obj):&amp;#10;    obj.size = (0, 0)&amp;#10;    obj.autoDraw = False&amp;#10;&amp;#10;def unhide(obj, size):&amp;#10;    obj.size = size&amp;#10;    obj.autoDraw = True&amp;#10;&amp;#10;def make_img(name, file_path, pos=(0, 0), size=(0, 0)):&amp;#10;    img, = visual.ImageStim(&amp;#10;        win=win,&amp;#10;        name=name,&amp;#10;        image=file_path,&amp;#10;        pos=pos,&amp;#10;        size=size&amp;#10;    ),&amp;#10;    img.autoDraw = True&amp;#10;    return img&amp;#10;&amp;#10;def make_slide(filename, pos=(0, 0), size=SLIDE_SIZE):&amp;#10;    return make_img(filename, f&quot;resources/imgs/slides/{filename}.png&quot;, pos, size)&amp;#10;&amp;#10;def make_sound(value, name=&quot;sound&quot;):&amp;#10;    snd, = sound.Sound(&amp;#10;        win=win,&amp;#10;        value=value,&amp;#10;        secs=-1,&amp;#10;        stereo=True,&amp;#10;        hamming=True,&amp;#10;        name=name&amp;#10;    ),&amp;#10;    snd.setVolume(1.0)&amp;#10;    return snd&amp;#10;&amp;#10;def dist_sq(x1, y1, x2, y2):&amp;#10;    dx, dy = x2 - x1, y2 - y1&amp;#10;    return (dx * dx) + (dy * dy)&amp;#10;&amp;#10;def round_dp(x, dp=5):&amp;#10;    num, = (10 ** dp),&amp;#10;    return round(x * num) / num&amp;#10;" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="function within_box(obj, box) {&amp;#10;    /*&amp;#10;    Determine if object is within box&amp;#10;    - Squared difference in x (and y) coordinates&amp;#10;    should be less than the square of half the&amp;#10;    box width (and height)&amp;#10;    - That would mean the center of the object is&amp;#10;    within the box boundaries&amp;#10;    */&amp;#10;    var box_h, box_w, box_x, box_y, dx, dy, hh, hw, obj_x, obj_y;&amp;#10;    [obj_x, obj_y] = obj.pos;&amp;#10;    [box_x, box_y] = box.pos;&amp;#10;    [box_w, box_h] = box.size;&amp;#10;    [dx, dy] = [(obj_x - box_x), (obj_y - box_y)];&amp;#10;    [hw, hh] = [(box_w / 2), (box_h / 2)];&amp;#10;    return (((dx * dx) &lt; (hw * hw)) &amp;&amp; ((dy * dy) &lt; (hh * hh)));&amp;#10;}&amp;#10;function snapped(obj1, obj2, func = within_box) {&amp;#10;    /*&amp;#10;    Determine if obj1 snapped to center of obj2&amp;#10;    - Check if obj1 is 'near' obj2, based on func&amp;#10;    - If yes, set the obj1's position to be&amp;#10;    equal to obj2's position and return True&amp;#10;    - Otherwise, do nothing and return False&amp;#10;    */&amp;#10;    if (func(obj1, obj2)) {&amp;#10;        obj1.pos = obj2.pos;&amp;#10;        return true;&amp;#10;    }&amp;#10;    return false;&amp;#10;}&amp;#10;function hide(obj) {&amp;#10;    obj.size = [0, 0];&amp;#10;    obj.autoDraw = false;&amp;#10;}&amp;#10;function unhide(obj, size) {&amp;#10;    obj.size = size;&amp;#10;    obj.autoDraw = true;&amp;#10;}&amp;#10;function make_img(name, file_path, pos = [0, 0], size = [0, 0]) {&amp;#10;    var img;&amp;#10;    [img] = [new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: name, &quot;image&quot;: file_path, &quot;pos&quot;: pos, &quot;size&quot;: size})];&amp;#10;    img.autoDraw = true;&amp;#10;    return img;&amp;#10;}&amp;#10;function make_slide(filename, pos = [0, 0], size = SLIDE_SIZE) {&amp;#10;    return make_img(filename, `resources/imgs/slides/${filename}.png`, pos, size);&amp;#10;}&amp;#10;function make_sound(value, name = &quot;sound&quot;) {&amp;#10;    var snd;&amp;#10;    [snd] = [new sound.Sound({&quot;win&quot;: psychoJS.window, &quot;value&quot;: value, &quot;secs&quot;: (- 1), &quot;stereo&quot;: true, &quot;hamming&quot;: true, &quot;name&quot;: name})];&amp;#10;    snd.setVolume(1.0);&amp;#10;    return snd;&amp;#10;}&amp;#10;function dist_sq(x1, y1, x2, y2) {&amp;#10;    var dx, dy;&amp;#10;    [dx, dy] = [(x2 - x1), (y2 - y1)];&amp;#10;    return ((dx * dx) + (dy * dy));&amp;#10;}&amp;#10;function round_dp(x, dp = 5) {&amp;#10;    var num;&amp;#10;    [num] = [Math.pow(10, dp)];&amp;#10;    return (Math.round((x * num)) / num);&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="functions" valType="code"/>
      </CodeComponent>
      <MouseComponent name="begin1Mouse">
        <Param name="clickable" updates="constant" val="GLOBAL_CONT" valType="list"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutineOnPress" updates="constant" val="valid click" valType="str"/>
        <Param name="name" updates="None" val="begin1Mouse" valType="code"/>
        <Param name="newClicksOnly" updates="constant" val="True" valType="bool"/>
        <Param name="saveMouseState" updates="None" val="never" valType="str"/>
        <Param name="saveParamsClickable" updates="constant" val="name," valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
        <Param name="timeRelativeTo" updates="constant" val="mouse onset" valType="str"/>
      </MouseComponent>
    </Routine>
    <Routine name="begin2">
      <CodeComponent name="begin2Code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((((slideFile2 === &quot;NA&quot;) || practice_passed) || terminate_experiment)) {&amp;#10;    continueRoutine = false;&amp;#10;} else {&amp;#10;    inst_slide = make_slide(slideFile2);&amp;#10;    unhide(GLOBAL_CONT, CONTINUE_SIZE);&amp;#10;    if (USE_AUDIO) {&amp;#10;        inst_sound = make_sound(`aud/mp3/DN_rule${pracNum}.mp3`);&amp;#10;        inst_sound.play();&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;if slideFile2 == &quot;NA&quot; \&amp;#10;or practice_passed or \&amp;#10;terminate_experiment:&amp;#10;    continueRoutine = False&amp;#10;else:&amp;#10;    inst_slide = make_slide(slideFile2)&amp;#10;    unhide(GLOBAL_CONT, CONTINUE_SIZE)&amp;#10;    if USE_AUDIO:&amp;#10;        inst_sound = make_sound(f&quot;aud/mp3/DN_rule{pracNum}.mp3&quot;)&amp;#10;        inst_sound.play()&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if ((slideFile2 !== &quot;NA&quot;)) {&amp;#10;    hide(inst_slide);&amp;#10;    hide(GLOBAL_CONT);&amp;#10;    if (USE_AUDIO) {&amp;#10;        inst_sound.stop();&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;if slideFile2 != &quot;NA&quot;:&amp;#10;    hide(inst_slide)&amp;#10;    hide(GLOBAL_CONT)&amp;#10;    if USE_AUDIO:&amp;#10;        inst_sound.stop()&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="begin2Code" valType="code"/>
      </CodeComponent>
      <MouseComponent name="begin2Mouse">
        <Param name="clickable" updates="constant" val="GLOBAL_CONT" valType="list"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutineOnPress" updates="constant" val="valid click" valType="str"/>
        <Param name="name" updates="None" val="begin2Mouse" valType="code"/>
        <Param name="newClicksOnly" updates="constant" val="True" valType="bool"/>
        <Param name="saveMouseState" updates="None" val="never" valType="str"/>
        <Param name="saveParamsClickable" updates="constant" val="name," valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
        <Param name="timeRelativeTo" updates="constant" val="mouse onset" valType="str"/>
      </MouseComponent>
    </Routine>
    <Routine name="begin3">
      <CodeComponent name="begin3Code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if (((((slideFile3 === &quot;NA&quot;) || practice_passed) || terminate_experiment) || ((! SHOW_DEMO) &amp;&amp; is_demo))) {&amp;#10;    continueRoutine = false;&amp;#10;} else {&amp;#10;    if ((slideFile3 === &quot;DEMO&quot;)) {&amp;#10;        demoText.text = &quot;Now, I am going to show you how the game is played and then it will be your turn&quot;;&amp;#10;        unhide(GLOBAL_CONT, CONTINUE_SIZE);&amp;#10;    } else {&amp;#10;        inst_slide = make_slide(slideFile3);&amp;#10;        unhide(GLOBAL_CONT, CONTINUE_SIZE);&amp;#10;        if ((USE_AUDIO &amp;&amp; (! is_practice))) {&amp;#10;            inst_sound = make_sound(&quot;aud/mp3/DN_aftprac.mp3&quot;);&amp;#10;            inst_sound.play();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;if slideFile3 == &quot;NA&quot; \&amp;#10;or practice_passed \&amp;#10;or terminate_experiment \&amp;#10;or (not SHOW_DEMO and is_demo):&amp;#10;    continueRoutine = False&amp;#10;elif slideFile3 == &quot;DEMO&quot;:&amp;#10;    demoText.text = (&quot;Now, I am going to show you &quot;&amp;#10;                     &quot;how the game is played and &quot;&amp;#10;                     &quot;then it will be your turn&quot;)&amp;#10;    unhide(GLOBAL_CONT, CONTINUE_SIZE)&amp;#10;else:&amp;#10;    inst_slide = make_slide(slideFile3)&amp;#10;    unhide(GLOBAL_CONT, CONTINUE_SIZE)&amp;#10;    if USE_AUDIO and not is_practice:&amp;#10;        inst_sound = make_sound(&quot;aud/mp3/DN_aftprac.mp3&quot;)&amp;#10;        inst_sound.play()&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if ((slideFile3 === &quot;DEMO&quot;)) {&amp;#10;    demoText.text = &quot;&quot;;&amp;#10;    hide(GLOBAL_CONT);&amp;#10;} else {&amp;#10;    if ((slideFile3 !== &quot;NA&quot;)) {&amp;#10;        hide(inst_slide);&amp;#10;        hide(GLOBAL_CONT);&amp;#10;        if ((USE_AUDIO &amp;&amp; (! is_practice))) {&amp;#10;            inst_sound.stop();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;if slideFile3 == &quot;DEMO&quot;:&amp;#10;    demoText.text = &quot;&quot;&amp;#10;    hide(GLOBAL_CONT)&amp;#10;elif slideFile3 != &quot;NA&quot;:&amp;#10;    hide(inst_slide)&amp;#10;    hide(GLOBAL_CONT)&amp;#10;    if USE_AUDIO and not is_practice:&amp;#10;        inst_sound.stop()&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="begin3Code" valType="code"/>
      </CodeComponent>
      <MouseComponent name="begin3Mouse">
        <Param name="clickable" updates="constant" val="GLOBAL_CONT" valType="list"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutineOnPress" updates="constant" val="valid click" valType="str"/>
        <Param name="name" updates="None" val="begin3Mouse" valType="code"/>
        <Param name="newClicksOnly" updates="constant" val="True" valType="bool"/>
        <Param name="saveMouseState" updates="None" val="never" valType="str"/>
        <Param name="saveParamsClickable" updates="constant" val="name," valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="False" valType="bool"/>
        <Param name="timeRelativeTo" updates="constant" val="mouse onset" valType="str"/>
      </MouseComponent>
      <TextComponent name="demoText">
        <Param name="color" updates="constant" val="white" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="num"/>
        <Param name="name" updates="None" val="demoText" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="condition" valType="str"/>
        <Param name="startVal" updates="None" val="slideFile3 == &quot;DEMO&quot;" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="0:" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$conditions_file" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="begin1"/>
    <Routine name="begin2"/>
    <Routine name="begin3"/>
    <Routine name="trial"/>
    <LoopTerminator name="trials"/>
  </Flow>
</PsychoPy2experiment>
